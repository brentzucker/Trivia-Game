import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.LinkedList;
import java.util.Stack;

import com.google.gson.Gson;

public class TriviaGameServer{
	
	// Load Server configuration
	private static final TriviaGameServerConfig server_config = TriviaGameServerConfigLoader.loadServerConfig();
	
	private static ServerSocket server_socket = null;
	private static Socket client_socket = null;
	
	public static final Stack<TriviaGameClientThread> threads = new Stack<TriviaGameClientThread>();
	public static final LinkedList<TriviaGameClientThread> running_threads = new LinkedList<TriviaGameClientThread>();
	
	public static void main(String[] args){
		TriviaGameClientThread helper;
		
		//Initialize server_socket to a new ServerSocket at the port from the configuration.
		try{
			server_socket = new ServerSocket(server_config.getPort()); // coming from JSON file
			System.out.println("Server is up on port " + server_config.getPort());
		}catch(IOException e){
			e.printStackTrace();
		}
		
		//Start threads stack
		for(int i = 0; i < server_config.getMaxClients(); i++){
			
			helper = null;
			threads.push(helper);
		}
		
		GameObject game = new GameObject();
		
		//String str =
		Gson g = new Gson();
		String json = g.toJson(game);
		
		//System.out.println(json);
		
		// Enter infinite running loop for accepting new connections and running the game.
		while(true){
			try{
				client_socket = server_socket.accept();
				System.out.println(client_socket.getInetAddress() +":" + client_socket.getPort() + " has connected.");
				
				if(threads.isEmpty()){
					PrintStream output_stream = new PrintStream(client_socket.getOutputStream());
					
					output_stream.println("Game is full. Try Later.");
					output_stream.close();
					client_socket.close();
				}
				
				else{
					helper = threads.pop();
					helper = new TriviaGameClientThread(client_socket, game);
					
					helper.start();
					running_threads.add(helper);
				}
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}
}