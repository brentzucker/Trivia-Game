import java.util.ArrayList;
import java.util.TreeSet;
import java.io.*; 
import java.util.Scanner;
import java.util.Random;
import java.util.Stack;
import java.util.Collections;

public class GameObject
{
	public ArrayList<Question> question_library;// = new ArrayList<Question>();
	public Stack<Question> question_stack = new Stack<Question>();
	public Question current_question;

	public GameObject()
	{
		//used on server side
		//if no parameter build question library
		System.out.println("Building question Library...");
		question_library = buildQuestionLibrary();

		buildQuestionStack();

		//intializes with first question
		current_question = question_stack.peek();
	}

	public GameObject(ArrayList<Question> q_a_l)
	{
		//constructor used on client side
		question_library = q_a_l;

		buildQuestionStack();

		//intializes first question
		current_question = question_stack.peek();
	}

	public GameObject(Stack<Question> q_s)
	{
		question_library.addAll(q_s);
		question_stack.addAll(q_s);

		//intializes first question
		current_question = question_stack.peek();
	}

	public GameObject(GameObject g_o)
	{ 
		question_library = g_o.question_library;
		question_stack.addAll(g_o.question_stack);

		//intializes first question
		current_question = question_stack.peek();
	}

	public void nextQuestion()
	{
			current_question = question_stack.pop();
	}

	public String correctAnswer()
	{
		return current_question.choices[current_question.answer];
	}

	//builds a list of 10 questions
	private void buildQuestionStack()
	{
		//a set is used to make sure there are no dublicate questions 
		TreeSet<Question> question_set = new TreeSet<Question>();

		while(question_set.size() < 10)
		{
			Random rn = new Random();
			
			int index = rn.nextInt(question_library.size());

			question_set.add(question_library.get(index));
		}

		question_stack.addAll(question_set);

		System.out.println("There are now "+question_stack.size()+" questions in the question stack.");
	}

	private ArrayList<Question> buildQuestionLibrary()
	{
		ArrayList<Question> q_array_list = new ArrayList<Question>();

		try
		{
			File file = new File("config/question_library.txt");
			Scanner inputFile = new Scanner(file);
			
			int count = 0;
			while(inputFile.hasNextLine())
			{
				String question = inputFile.nextLine();
				String[] choices = inputFile.nextLine().split(", ");
				int answer = Integer.parseInt(""+inputFile.nextLine().charAt(0));

				q_array_list.add(new Question(question, choices, answer, count));
				count++;
			}

			inputFile.close();
		}
		catch(IOException e)
		{
			System.out.println("cant find file.");
		}


		return q_array_list; 
 	}

	/*test
 	public static void main(String[] args)throws IOException
 	{
 		
 		GameObject g1 = new GameObject();

 		GameObject g2 = new GameObject(g1);

 		while (!g1.question_stack.empty())
 		{
 			System.out.println("Question # "+g2.question_stack.size()+"\n"+g2.current_question.question+"\n"+g2.current_question.choices[0]+"\n"+g2.current_question.choices[1]+"\n"+g2.current_question.choices[2]+"\n"+g2.current_question.choices[3]
 			+"\nanswer: " +g2.correctAnswer()
 			+"\n"+g1.current_question.question+ "\n"+g1.current_question.choices[0]+ "\n"+g1.current_question.choices[1]+ "\n"+g1.current_question.choices[2]+ "\n"+g1.current_question.choices[3] +
 			"\nanswer: " + g1.correctAnswer());
 		
 			g1.nextQuestion();
 			g2.nextQuestion();
 		}
 	}
 	*/
}