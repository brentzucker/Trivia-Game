import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.awt.*;
import javax.swing.Timer;
import javax.imageio.ImageIO;

import javax.swing.*;

import java.awt.event.*;



public class TriviaGameClient extends JFrame implements Runnable
{
	public static int port = 9000;
	public static String host = "localhost";
	public static String screenname = "DefaultClient";
	
	private static Socket client_socket = null;
	private static PrintStream output_stream = null;
	private static BufferedReader input_stream = null;
	private static BufferedReader output_line = null;
	
	public static String client_question;
	public static String[] client_choices = new String[4];
	public static boolean fully_loaded = false; 
	
	private static boolean is_closed = false;
   
	public static JButton button1;
	public static JButton button2;
	public static JButton button3;
	public static JButton button4;
	
	public static JLabel question_messageLabel;
	public static JLabel timer_messageLabel;
	
	public static JLabel ip_label;
	public static JLabel name_label; 
	public static JLabel port_label;

	int timer_count = 10;  //the current frame number
	
	int pause = 0; // length of time between each tick counting down (1 second)
	int speed = 1000; //speed of every update
	
	Timer timer; //The timer counting down on each question

	public TriviaGameClient()
	{
		setTitle("Client GUI");
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
		setLayout(new BorderLayout());
		
		JPanel center_panel = new JPanel();
		JPanel west_panel = new JPanel();
		JPanel east_panel = new JPanel();
		JPanel north_panel = new JPanel();
		JPanel question_panel = new JPanel();
		JPanel south_panel = new JPanel();
		
		String choice_A = client_choices[0];
		String choice_B = client_choices[1];
		String choice_C = client_choices[2];
		String choice_D = client_choices[3];
		
		question_messageLabel = new JLabel(client_question);
		question_messageLabel.setFont(new Font("Serif", Font.BOLD, 28));
		JLabel big_empty_label = new JLabel(" ");
		big_empty_label.setFont(new Font("Serif", Font.BOLD, 120));
		timer_messageLabel = new JLabel("10");
		timer_messageLabel.setFont(new Font("Serif", Font.BOLD, 120));
		
		ip_label = new JLabel(host);
		name_label = new JLabel(screenname);
		port_label = new JLabel(""+port);
		
		name_label.setHorizontalAlignment(JLabel.CENTER);
		port_label.setHorizontalAlignment(JLabel.RIGHT);
		
		try //tries to find image for button
		{
			Image img = ImageIO.read(getClass().getResource("button.jpg"));
			Image scaled_img = img.getScaledInstance( 400, 50, Image.SCALE_SMOOTH);
			ImageIcon button_icon = new ImageIcon(scaled_img);
			button1 = new JButton(choice_A, button_icon);
			button2 = new JButton(choice_B, button_icon);
			button3 = new JButton(choice_C, button_icon);
			button4 = new JButton(choice_D, button_icon);
			
			button1.setHorizontalTextPosition(JButton.CENTER);
			button1.setVerticalTextPosition(JButton.CENTER);
			button2.setHorizontalTextPosition(JButton.CENTER);
			button2.setVerticalTextPosition(JButton.CENTER);
			button3.setHorizontalTextPosition(JButton.CENTER);
			button3.setVerticalTextPosition(JButton.CENTER);
			button4.setHorizontalTextPosition(JButton.CENTER);
			button4.setVerticalTextPosition(JButton.CENTER);
		}
		catch(IOException ex)
		{
			
		}
		
		button1.addActionListener(new ChoiceAListener());
		button2.addActionListener(new ChoiceBListener());
		button3.addActionListener(new ChoiceCListener());
		button4.addActionListener(new ChoiceDListener());
		
		south_panel.setLayout(new GridLayout(2,2));
		west_panel.setLayout(new GridLayout(3,1));
		north_panel.setLayout(new GridLayout(1,3));
		
		north_panel.add(ip_label);
		north_panel.add(name_label);
		north_panel.add(port_label);
		
		west_panel.add(big_empty_label);
		west_panel.add(timer_messageLabel);
		south_panel.add(button1);
		south_panel.add(button2);
		south_panel.add(button3);
		south_panel.add(button4);
		
		question_panel.add(question_messageLabel);
		
		add(south_panel, BorderLayout.SOUTH);
		add(north_panel, BorderLayout.NORTH);
		add(question_panel, BorderLayout.CENTER);
		add(east_panel, BorderLayout.EAST);
		add(west_panel, BorderLayout.WEST);
		//add(center_panel, BorderLayout.CENTER);
		
		pack();
		
		setSize(800, 600);
		setVisible(true);
	}
	
	public static void main(String[] args)
	{

		
		//get port and host from client
		
		JTextField client_name = new JTextField();
		JTextField client_host = new JTextField();
		JTextField client_port = new JTextField();
		
		Object[] fields = {
				"Screenname:", client_name,
				"Host IP:", client_host,
				"Port:", client_port
		};
		
		JOptionPane.showConfirmDialog(null, fields, "Trivia Game Config - leave blank for default", JOptionPane.OK_OPTION);
		
		if(client_name.getText().length() > 0)
		{
			screenname = client_name.getText();
		}
			
		
		if(client_host.getText().length() > 5)
		{
			host = client_host.getText();
		}
			
		
		if(client_port.getText().length() > 3)
		{
			port = Integer.parseInt(client_port.getText());
		}
		
		try{
			client_socket = new Socket(host, port);
			
			output_stream = new PrintStream(client_socket.getOutputStream());
			input_stream = new BufferedReader(new InputStreamReader(client_socket.getInputStream()));
			
			output_line = new BufferedReader(new InputStreamReader(System.in));
			
			 if (client_socket != null && output_stream != null && input_stream != null){
				 new Thread(new TriviaGameClient()).start();
			 }
			
			while(! is_closed){
				//output_stream.println(output_line.readLine().trim());
				String input = output_line.readLine().trim();
				output_stream.println(input);
			}
			
			 output_stream.close();
			 input_stream.close();
			 client_socket.close();
		}catch(UnknownHostException e){
			e.printStackTrace();
		}
		catch(IOException e){
			e.printStackTrace();
		}
	}
	
	public void run()
	{
		String response;
		int count = 0;
		
		//ip_label.setText(host);
		//name_label.setText(screenname);
		//port_label.setText(""+port);
		
		try{
			while((response = input_stream.readLine()) != null)
			{
				System.out.println(response);
				
				if(response.contains("?"))
				{
					question_messageLabel.setText(response);
					client_question = response;
					count++;
				}
					
				if(response.startsWith("A:"))
				{
					button1.setText(response.substring(3));
					client_choices[0] = response;
					count++;
				}
					
				if(response.startsWith("B:"))
				{
					button2.setText(response.substring(3));
					client_choices[1] = response;
					count++;
				}
					
				if(response.startsWith("C:"))
				{
					button3.setText(response.substring(3));
					client_choices[2] = response;
					count++;
				}	
					
				if(response.startsWith("D:"))
				{
					button4.setText(response.substring(3));
					client_choices[3] = response;
					count++;
				}
				
				if(count-5 == 0)
				{
					//do this every second 10..0
					//timer_messageLabel.setText(""+timer_count--);
					
					//call when message text is being update
					//Set up timer to drive animation events.
			        timer = new Timer(speed, new timerListener());
			        timer.setInitialDelay(pause);
					timer.start(); 

					count = 0;
				}
				
				if(response.equals("***END***"))
					break;
				
			}
			is_closed = true;
			
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	
	private class ChoiceAListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			timer.stop();
			timer_count = 10;
			output_stream.println("A");
		}
	}
	
	private class ChoiceBListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			timer.stop();
			timer_count = 10;
			output_stream.println("B");
		}
	}
	
	private class ChoiceCListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			timer.stop();
			timer_count = 10;
			output_stream.println("C");
		}
	}
	
	private class ChoiceDListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			timer.stop();
			timer_count = 10;
			output_stream.println("D");
		}
	}
	
	//Handle timer event. Update the timer_count (time left on question) and the
    //offset.  If it's the last frame, restart the timer to get a long
    //pause between loops.
	
	private class timerListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e) 
	    {
			timer_messageLabel.setText(""+timer_count);

	        if (timer_count == 0) 
	        {
	            timer_messageLabel.setForeground(Color.RED);
	            timer.stop();
	        }
	        
	        if(timer_count <= 3)
	        {
	        	timer_messageLabel.setForeground(Color.RED);
	        }
	        else
	        	timer_messageLabel.setForeground(Color.BLACK);

	        if (timer_count > 0) 
	        {
	        	timer_count--;
	        }
	    }
	}
    
	
}
